/*
 _______________________________________
/ The best way to success is failing in \
\ the attempt                           /
 ---------------------------------------
   \
    \  .——————.
      .———.    \
     (     )   +——\
      `———´    |  |
      |        |  |
      |   __   +——/
      \__/  \__/
*/

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "operation/OperationMode.h"
#include <time.h>

typedef unsigned char byte;

// Find the position of a character in the base64_chars table
static int base64_char_value(char c) {
    if (c >= 'A' && c <= 'Z') return c - 'A';
    if (c >= 'a' && c <= 'z') return c - 'a' + 26;
    if (c >= '0' && c <= '9') return c - '0' + 52;
    if (c == '+') return 62;
    if (c == '/') return 63;
    return -1; // Invalid character
}

// Decode Base64 string to binary data
byte* base64_decode(const char *data, size_t *output_length) {
    if (data == NULL) return NULL;
    
    size_t input_length = strlen(data);
    if (input_length == 0) {
        *output_length = 0;
        return NULL;
    }
    
    // Count padding characters ('=')
    size_t padding = 0;
    if (input_length >= 1 && data[input_length - 1] == '=') padding++;
    if (input_length >= 2 && data[input_length - 2] == '=') padding++;
    
    // Calculate output size
    *output_length = (input_length / 4) * 3 - padding;
    
    byte *decoded_data = malloc(*output_length);
    if (decoded_data == NULL) return NULL;
    
    size_t i, j = 0;
    
    for (i = 0; i < input_length; i += 4) {
        uint32_t sextet_a, sextet_b, sextet_c, sextet_d;
        uint32_t triple;
        
        // Handle each character, treating '=' as 0
        sextet_a = (i < input_length && data[i] != '=') ? base64_char_value(data[i]) : 0;
        sextet_b = (i+1 < input_length && data[i+1] != '=') ? base64_char_value(data[i+1]) : 0;
        sextet_c = (i+2 < input_length && data[i+2] != '=') ? base64_char_value(data[i+2]) : 0;
        sextet_d = (i+3 < input_length && data[i+3] != '=') ? base64_char_value(data[i+3]) : 0;
        
        // Check for invalid characters (excluding padding)
        if ((i < input_length && data[i] != '=' && sextet_a == -1) ||
            (i+1 < input_length && data[i+1] != '=' && sextet_b == -1) ||
            (i+2 < input_length && data[i+2] != '=' && sextet_c == -1) ||
            (i+3 < input_length && data[i+3] != '=' && sextet_d == -1)) {
            free(decoded_data);
            *output_length = 0;
            return NULL;
        }
        
        triple = (sextet_a << 18) + (sextet_b << 12) + (sextet_c << 6) + sextet_d;
        
        // Output the bytes, but only up to the calculated output length
        if (j < *output_length) decoded_data[j++] = (triple >> 16) & 0xFF;
        if (j < *output_length) decoded_data[j++] = (triple >> 8) & 0xFF;
        if (j < *output_length) decoded_data[j++] = triple & 0xFF;
    }
    
    return decoded_data;
}

// Base64 encoding table
static const char base64_chars[] = 
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

// Encode binary data to Base64 string
char* base64_encode(const unsigned char *data, size_t input_length) {
    size_t output_length = 4 * ((input_length + 2) / 3);
    char *encoded_data = malloc(output_length + 1);
    if (encoded_data == NULL) return NULL;

    size_t i, j;
    for (i = 0, j = 0; i < input_length;) {
        uint32_t octet_a = i < input_length ? data[i++] : 0;
        uint32_t octet_b = i < input_length ? data[i++] : 0;
        uint32_t octet_c = i < input_length ? data[i++] : 0;

        uint32_t triple = (octet_a << 16) + (octet_b << 8) + octet_c;

        encoded_data[j++] = base64_chars[(triple >> 18) & 0x3F];
        encoded_data[j++] = base64_chars[(triple >> 12) & 0x3F];
        encoded_data[j++] = base64_chars[(triple >> 6) & 0x3F];
        encoded_data[j++] = base64_chars[triple & 0x3F];
    }

    // Add padding characters if needed
    for (i = 0; i < (3 - input_length % 3) % 3; i++) {
        encoded_data[output_length - 1 - i] = '=';
    }

    encoded_data[output_length] = '\0';
    return encoded_data;
}

byte* encrypt_data(byte* input, byte key, char* mode) {
    byte* output = NULL;
    if(strcmp(mode, "ECB") == 0) {
        output = ebc_mode_encrypt(input, key);
    } else if(strcmp(mode, "CBC") == 0) {
        byte iv; 
        output = cbc_mode_encrypt(input, key, &iv);
    } else if(strcmp(mode, "CTR") == 0) {
        output = counter_mode_encrypt(input, key);
    } else {
        fprintf(stderr, "Unsupported mode: %s\n", mode);
        free(output);
        return NULL;
    }

    return output;
}

byte* decrypt_data(byte* input, byte key, char* mode, size_t length) {
    byte* output = NULL;
    
    if(strcmp(mode, "ECB") == 0) {
        output = ebc_mode_decrypt(input, key, length);
    } else if(strcmp(mode, "CBC") == 0) {
        output = cbc_mode_decrypt(input, key, length);
    } else if(strcmp(mode, "CTR") == 0) {
        output = counter_mode_decrypt(input, key, length);
    } else {
        fprintf(stderr, "Unsupported mode: %s\n", mode);
        free(output);
        return NULL;
    }

    return output;
}

byte* read_file(const char* filename, size_t* file_size) {
    FILE* file = fopen(filename, "rb");
    if (!file) {
        fprintf(stderr, "Error: Cannot open file '%s'\n", filename);
        return NULL;
    }

    fseek(file, 0, SEEK_END);
    *file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    if (*file_size == 0) {
        fprintf(stderr, "Error: File '%s' is empty\n", filename);
        fclose(file);
        return NULL;
    }

    byte* buffer = (byte*)malloc(*file_size);
    if (!buffer) {
        fprintf(stderr, "Error: Memory allocation failed for file '%s'\n", filename);
        fclose(file);
        return NULL;
    }

    size_t bytes_read = fread(buffer, 1, *file_size, file);
    fclose(file);

    if (bytes_read != *file_size) {
        fprintf(stderr, "Error: Failed to read entire file '%s'\n", filename);
        free(buffer);
        return NULL;
    }

    return buffer;
}

int write_file(const char* filename, const byte* data, size_t data_size) {
    FILE* file = fopen(filename, "wb");
    if (!file) {
        fprintf(stderr, "Error: Cannot create file '%s'\n", filename);
        return 0;
    }

    size_t bytes_written = fwrite(data, 1, data_size, file);
    fclose(file);

    if (bytes_written != data_size) {
        fprintf(stderr, "Error: Failed to write entire file '%s'\n", filename);
        return 0;
    }

    return 1;
}

char* create_encrypted_filename(const char* input_filename) {
    size_t len = strlen(input_filename);
    char* output_filename = (char*)malloc(len + 5); // +4 for ".enc" +1 for null terminator
    if (!output_filename) {
        fprintf(stderr, "Error: Memory allocation failed for filename\n");
        return NULL;
    }
    
    strcpy(output_filename, input_filename);
    strcat(output_filename, ".enc");
    return output_filename;
}

char* remove_enc_extension(const char* input_filename) {
    size_t len = strlen(input_filename);
    
    // Check if filename ends with .enc
    if (len < 4 || strcmp(input_filename + len - 4, ".enc") != 0) {
        fprintf(stderr, "Error: File '%s' does not have .enc extension\n", input_filename);
        return NULL;
    }
    
    char* output_filename = (char*)malloc(len - 3); // -4 for ".enc" +1 for null terminator
    if (!output_filename) {
        fprintf(stderr, "Error: Memory allocation failed for filename\n");
        return NULL;
    }
    
    strncpy(output_filename, input_filename, len - 4);
    output_filename[len - 4] = '\0';
    return output_filename;
}

int main(int argc, char *argv[]) {
    if (argc == 2 && strcmp(argv[1], "-gk") == 0) {
        srand((unsigned int)time(NULL));
        byte random_key = (byte)(rand() % 256);
        
        char* b64_key = base64_encode(&random_key, 1);
        if (!b64_key) {
            fprintf(stderr, "Failed to encode key to Base64\n");
            return 1;
        }
        
        printf("Generated random key: %s (0x%02X)\n", b64_key, random_key);
        free(b64_key);
        return 0;
    }

    if (argc < 4) {
        fprintf(stderr, "Usage: %s <operation> <input> <key> <mode>\n", argv[0]);
        fprintf(stderr, "Operations:\n");
        fprintf(stderr, "  -e  : Encrypt string\n");
        fprintf(stderr, "  -d  : Decrypt string\n");
        fprintf(stderr, "  -fe : Encrypt file\n");
        fprintf(stderr, "  -fd : Decrypt file\n");
        fprintf(stderr, "  -gk : Generate random Base64 key\n");
        fprintf(stderr, "Modes: ECB, CBC, CTR\n");
        fprintf(stderr, "Key format: Base64 encoded single byte (e.g., 'Kg==' for 0x2A)\n");
        fprintf(stderr, "Examples:\n");
        fprintf(stderr, "  %s -gk\n", argv[0]);
        fprintf(stderr, "  %s -e \"Hello World\" Kg== ECB\n", argv[0]);
        fprintf(stderr, "  %s -fe /path/to/file.txt Kg== ECB\n", argv[0]);
        fprintf(stderr, "  %s -fd /path/to/file.txt.enc Kg== ECB\n", argv[0]);
        return 1;
    }

    char* operation = argv[1];
    int operation_type = 0;
    if (strcmp(operation, "-e") == 0) {
        operation_type = 0;
    } else if (strcmp(operation, "-d") == 0) {
        operation_type = 1;
    } else if (strcmp(operation, "-fe") == 0) {
        operation_type = 2;
    } else if (strcmp(operation, "-fd") == 0) {
        operation_type = 3;
    } else {
        fprintf(stderr, "Invalid operation: %s\n", operation);
        return 1;
    }

    // Get the input string directly without conversion
    byte* input = (byte*)strdup(argv[2]);
    if (!input) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }
    
    // Decode Base64 key
    size_t key_length;
    byte* decoded_key = base64_decode(argv[3], &key_length);
    if (!decoded_key || key_length != 1) {
        fprintf(stderr, "Invalid Base64 key. Key must be a single byte encoded in Base64.\n");
        fprintf(stderr, "Example: Use 'Kg==' for key 0x2A\n");
        free(input);
        if (decoded_key) free(decoded_key);
        return 1;
    }
    byte key = decoded_key[0];
    free(decoded_key);

    char* mode = argv[4];

    if(operation_type == 1){
        size_t decoded_length;
        byte* decoded_input = base64_decode((char*)input, &decoded_length);
        if (!decoded_input) {
            fprintf(stderr, "Base64 decoding failed\n");
            free(input);
            return 1;
        }
        
        if (strcmp(mode, "CTR") == 0 || strcmp(mode, "CBC") == 0) {
            byte* temp = realloc(decoded_input, decoded_length + 1);
            if (!temp) {
                fprintf(stderr, "Memory reallocation failed\n");
                free(decoded_input);
                free(input);
                return 1;
            }
            decoded_input = temp;
            decoded_input[decoded_length] = '\0';
        }

        byte* decrypted = decrypt_data(decoded_input, key, mode, decoded_length);
        if (!decrypted) {
            fprintf(stderr, "Decryption failed\n");
            free(input);
            free(decoded_input);
            return 1;
        }
        
        printf("Input: %s\n", input);
        printf("Decrypted: %s\n", decrypted);

        free(decoded_input);
        free(decrypted);
        return 0;

    } else if(operation_type == 2) {
        byte* file_data;
        size_t file_size;
        file_data = read_file((char*)input, &file_size);
        if (!file_data) {
            free(input);
            return 1;
        }

        byte* encrypted = encrypt_data(file_data, key, mode);
        if (!encrypted) {
            fprintf(stderr, "Encryption failed\n");
            free(file_data);
            free(input);
            return 1;
        }

        char* output_filename = create_encrypted_filename((char*)input);
        if (!output_filename) {
            free(file_data);
            free(encrypted);
            free(input);
            return 1;
        }

        size_t encrypted_size = file_size;
        if (strcmp(mode, "CTR") == 0 || strcmp(mode, "CBC") == 0) {
            encrypted_size = file_size + 1;
        }

        char* b64Encode = base64_encode(encrypted, encrypted_size);
        if (!b64Encode) {
            fprintf(stderr, "Base64 encoding failed\n");
            free(file_data);
            free(encrypted);
            free(output_filename);
            free(input);
            return 1;
        }

        if (!write_file(output_filename, (byte*)b64Encode, strlen(b64Encode))) {
            fprintf(stderr, "Failed to write encrypted data to file '%s'\n", output_filename);
            free(file_data);
            free(encrypted);
            free(output_filename);
            free(b64Encode);
            free(input);
            return 1;
        }

        printf("File '%s' encrypted successfully to '%s'\n", input, output_filename);

        free(file_data);
        free(encrypted);
        free(output_filename);
        free(input);
        free(b64Encode);
        return 0;

    } else if(operation_type == 3) {
        char* output_filename = remove_enc_extension((char*)input);
        if (!output_filename) {
            free(input);
            return 1;
        }

        size_t file_size;
        byte* file_data = read_file((char*)input, &file_size);
        if (!file_data) {
            free(output_filename);
            free(input);
            return 1;
        }

        size_t decoded_length;
        byte* decoded_input = base64_decode((char*)file_data, &decoded_length);
        if (!decoded_input) {
            fprintf(stderr, "Base64 decoding failed\n");
            free(file_data);
            free(output_filename);
            free(input);
            return 1;
        }

        byte* decrypted = decrypt_data(decoded_input, key, mode, decoded_length);
        if (!decrypted) {
            fprintf(stderr, "Decryption failed\n");
            free(file_data);
            free(decoded_input);
            free(output_filename);
            free(input);
            return 1;
        }

        size_t decrypted_size = decoded_length;
        if (strcmp(mode, "CTR") == 0 || strcmp(mode, "CBC") == 0) {
            decrypted_size = decoded_length - 1;
        }

        if (!write_file(output_filename, decrypted, decrypted_size)) {
            fprintf(stderr, "Failed to write decrypted data to file '%s'\n", output_filename);
            free(file_data);
            free(decoded_input);
            free(decrypted);
            free(output_filename);
            free(input);
            return 1;
        }

        printf("File '%s' decrypted successfully to '%s'\n", input, output_filename);
        
        free(file_data);
        free(decoded_input);
        free(decrypted);
        free(output_filename);
        free(input);
        return 0;

    } else {
        byte* encrypted = encrypt_data(input, key, mode);
        if (!encrypted) {
            fprintf(stderr, "Encryption failed\n");
            free(input);
            return 1;
        }

        size_t input_len = strlen((char*)input);
        size_t encrypted_len = input_len;

        if (strcmp(mode, "CTR") == 0 || strcmp(mode, "CBC") == 0) {
            encrypted_len = input_len + 1;
        }

        printf("Input: %s\n", input);
        printf("Encrypted: ");
        char* b64 = base64_encode(encrypted, encrypted_len);
        printf("%s", b64);
        free(b64);
        printf("\n");
        
        free(encrypted);
        free(input);
        return 0;
    }
}